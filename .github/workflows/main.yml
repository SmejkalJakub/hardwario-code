name: main

on:
  release:
    types: [published]

env: 
  VERSION: ${GITHUB_REF##*/}
  PLAIN_VERSION: ${GITHUB_REF##*/v}

  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
  APP_EMAIL: ${{ secrets.APP_EMAIL }}
  APPLICATION_CERTIFICATE_BASE64: ${{ secrets.APPLICATION_CERTIFICATE_BASE64 }}

jobs:
#  gdrive-upload:
#    name: Upload all exports to Google Drive
#    needs: [windows-export, linux-export, macos-export]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Download all workflow run artifacts
#        uses: actions/download-artifact@v3
#
#      - name: Setup env
#        run: |
#          echo "TAG=${{env.VERSION}}" >> "$GITHUB_ENV"
#          mv hardwario-code-windows/* .
#          mv hardwario-code-linux/* .
#          mv hardwario-code-macos/* .
#
#      - name: Upload to gdrive Windows
#        uses: adityak74/google-drive-upload-git-action@main
#        with:
#          credentials: ${{ secrets.credentials }}
#          filename: "hio-code-${{env.TAG}}-windows.msi"
#          folderId: ${{ secrets.folderId }}
#     
#      - name: Upload to gdrive Linux tar
#        uses: adityak74/google-drive-upload-git-action@main
#        with:
#          credentials: ${{ secrets.credentials }}
#          filename: "hio-code-${{env.TAG}}-linux.tar.gz"
#          folderId: ${{ secrets.folderId }}
#
##      - name: Upload to gdrive Linux rpm
##        uses: adityak74/google-drive-upload-git-action@main
##        with:
##          credentials: ${{ secrets.credentials }}
##          filename: "hio-code-${{env.TAG}}-linux.rpm"
##          folderId: ${{ secrets.folderId }}
#
##      - name: Upload to gdrive Linux deb
##        uses: adityak74/google-drive-upload-git-action@main
##        with:
##          credentials: ${{ secrets.credentials }}
##          filename: "hio-code-${{env.TAG}}-linux.deb"
##          folderId: ${{ secrets.folderId }}
#
#      - name: Upload to gdrive macOS
#        uses: adityak74/google-drive-upload-git-action@main
#        with:
#          credentials: ${{ secrets.credentials }}
#          filename: "hio-code-${{env.TAG}}-macos.pkg"
#          folderId: ${{ secrets.folderId }}
#         
#  windows-export:
#    name: Export HARDWARIO Code Windows
#    runs-on: windows-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#      - run: pip install gdown
#
#      - uses: caphyon/advinst-github-action@v1.0
#        with:
#          advinst-version: '19.7'
#          advinst-enable-automation: 'true'
#
#      - name: Get latest HARDWARIO Tower VSCode Extension 
#        uses: robinraju/release-downloader@v1.4
#        with:
#          repository: "hardwario/hardwario-tower-vscode-extension"
#          latest: true
#          fileName: "*.vsix"
#        
#      - run: mv *.vsix hardwario-tower.vsix
#        
#      - name: Download Visual Studio Code and data folder
#        run: gdown --folder 1XnymViTKGAubvZs3_yKOnC2SSQivujBh
#      
#      - name: Unzip all downloaded files
#        run: | 
#          7z x Windows/hardwario-code-windows.zip -ohardwario-code/ -r 
#          7z x Windows/data.zip -ohardwario-code/ -r
#
#      - name: Install all extensions
#        shell: cmd
#        run: |
#          call hardwario-code/bin/code.cmd --install-extension cschlosser.doxdocgen
#          call hardwario-code/bin/code.cmd --install-extension marus25.cortex-debug
#          call hardwario-code/bin/code.cmd --install-extension ms-vscode.cpptools
#          call hardwario-code/bin/code.cmd --install-extension ms-vscode.cpptools-themes
#          call hardwario-code/bin/code.cmd --install-extension twxs.cmake
#          call hardwario-code/bin/code.cmd --install-extension hardwario-tower.vsix
#
#      - name: Setup env
#        shell: bash
#        run: | 
#          echo "TAG=${{env.VERSION}}" >> "$GITHUB_ENV"
#          echo "INSTALLER_TAG=${{env.PLAIN_VERSION}}" >> "$GITHUB_ENV"
#
#      - name: Rename executable
#        shell: bash 
#        run: mv hardwario-code/*.exe hardwario-code/HARDWARIO\ Code.exe 
#          
#      - name: Create installer
#        shell: PowerShell
#        run: |
#          $advinst = New-Object -ComObject AdvancedInstaller
#          $project = $advinst.CreateProjectS("freeware")
#          $project.ProductDetails.Name = "HARDWARIO Code"
#          $project.ProductDetails.Publisher = "HARDWARIO a.s."
#          $project.ProductDetails.Version = "${{env.INSTALLER_TAG}}"
#          $project.ProductDetails
#
#          $project.FilesComponent.AddFolderContentS("appdir", "${{ github.workspace }}\hardwario-code")
#          $project.InstallParameters.ApplicationFolder = "[LocalAppDataFolder]\Programs\[ProductName]"
#          $project.ProductDetails.SetIcon("${{ github.workspace }}\media\hardwario-code-icon.ico")
#
#          $project.ShortcutsComponent.CreateFileShortcutS("desktopfolder", "appdir\HARDWARIO Code.exe")
#          $project.ShortcutsComponent.CreateFileShortcutS($project.PredefinedFolders.ShortcutFolder.FullPath, "appdir\HARDWARIO Code.exe")
#          $project.ShortcutsComponent.Shortcuts[0].Icon("${{ github.workspace }}\media\hardwario-code-icon.ico")
#          $project.ShortcutsComponent.Shortcuts[1].Icon("${{ github.workspace }}\media\hardwario-code-icon.ico")
#          
#          $outputFolder = "${{ github.workspace }}\setup";
#          $defaultBuild = $project.BuildComponent.Builds[0];
#          $defaultBuild.OutputFolder = $outputFolder
#          
#          $project.SaveAs("${{ github.workspace }}\hardwario-code.aip")
#          $project.Build()
#
#      - name: Change the msi name
#        run: mv setup/*.msi hio-code-${{env.TAG}}-windows.msi
#
#      - name: Publish the extension;
#        uses: softprops/action-gh-release@v0.1.5
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          files: hio-code-${{env.TAG}}-windows.msi
#     
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: hardwario-code-windows
#          path: hio-code-${{env.TAG}}-windows.msi
#          
#  linux-export:
#    name: Export HARDWARIO Code Linux
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#      - run: pip install gdown
#
#      - name: Get latest HARDWARIO Tower VSCode Extension 
#        uses: robinraju/release-downloader@v1.4
#        with:
#          repository: "hardwario/hardwario-tower-vscode-extension"
#          latest: true
#          fileName: "*.vsix"
#        
##      - name: Install fpm
##        run: |
##          sudo apt-get install ruby-dev build-essential
##          sudo gem install fpm
##          sudo apt-get install rpm
#
#      - run: mv *.vsix hardwario-tower.vsix
#        
#      - name: Download Visual Studio Code and data folder
#        run: gdown --folder 1e3RYcO_byAFfxBGk8_H6Mn6VtRCxRSWN
#                
#      - name: Unzip all downloaded files
#        run: | 
#          tar -xvzf Linux/hardwario-code-linux.tar.gz 
#          mv VSCode-linux-x64 hardwario-code   
#          tar -xf Linux/data.tar.xz -C hardwario-code/
#
#          chmod o+rwx hardwario-code
#          chmod +rwx hardwario-code/code
#          chmod 777 -R hardwario-code/data
#
#          cp media/hardwario-code-icon.png hardwario-code/
#          cp media/hardwario-code.desktop hardwario-code/
#
#          cp media/install.sh hardwario-code/
#          chmod +x hardwario-code/install.sh
#
#      - name: Install all extensions
#        run: |
#          ./hardwario-code/bin/code --install-extension cschlosser.doxdocgen
#          ./hardwario-code/bin/code --install-extension marus25.cortex-debug
#          ./hardwario-code/bin/code --install-extension ms-vscode.cpptools
#          ./hardwario-code/bin/code --install-extension ms-vscode.cpptools-themes
#          ./hardwario-code/bin/code --install-extension twxs.cmake
#          ./hardwario-code/bin/code --install-extension hardwario-tower.vsix
#
#      - name: Setup env
#        run: |
#          echo "TAG=${{env.VERSION}}" >> "$GITHUB_ENV"
#          echo "PLAIN_TAG=${{env.PLAIN_VERSION}}" >> "$GITHUB_ENV"
#
#      - name: Zip the final product
#        run: tar -czvf hio-code-${{env.TAG}}-linux.tar.gz hardwario-code/
#
##      - name: Create packages
##        run: |
##          fpm -t deb --version ${{env.PLAIN_TAG}} --after-install afterInstallScript.sh --after-remove afterRemoveScript.sh -p hio-code-${{env.TAG}}-linux.deb hardwario-code
##          fpm -t rpm --version ${{env.PLAIN_TAG}} --after-install afterInstallScript.sh --after-remove afterRemoveScript.sh -p hio-code-${{env.TAG}}-linux.rpm hardwario-code
#
#      - name: Publish the extension
#        uses: softprops/action-gh-release@v0.1.5
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          files: |
#            hio-code-${{env.TAG}}-linux.tar.gz
#
##            hio-code-${{env.TAG}}-linux.deb
##            hio-code-${{env.TAG}}-linux.rpm
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: hardwario-code-linux
#          path: hio-code-${{env.TAG}}-linux.tar.gz

#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: hardwario-code-linux
#          path: hio-code-${{env.TAG}}-linux.deb
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: hardwario-code-linux
#          path: hio-code-${{env.TAG}}-linux.rpm

  macos-export:
    name: Export HARDWARIO Code macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install gdown

      - name: Get latest HARDWARIO Tower VSCode Extension 
        uses: robinraju/release-downloader@v1.4
        with:
          repository: "hardwario/hardwario-tower-vscode-extension"
          latest: true
          fileName: "*.vsix"
        
#      - run: xcrun altool --notarization-info 961acef6-f3d8-4f1e-9641-77eba9956fc8 --username $APP_EMAIL --password $APP_SPECIFIC_PASSWORD
      - run: mv *.vsix hardwario-tower.vsix
        
      - name: Download Visual Studio Code and data folder
        run: gdown --folder 1Lb6Ulpk-yXRd-UpaU8DvYJUFpf_XDkg1 
                
      - name: Unzip all downloaded files
        run: | 
          mkdir hardwario-code
          unzip macOS/hardwario-code-macos.zip
          unzip macOS/data.zip -d hardwario-code/
          xattr -dr com.apple.quarantine Visual\ Studio\ Code.app
          mv Visual\ Studio\ Code.app hardwario-code/Visual\ Studio\ Code.app
          chmod -R 777 hardwario-code/
          ls hardwario-code

      - name: Install all extensions
        run: |
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension cschlosser.doxdocgen
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension marus25.cortex-debug
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension ms-vscode.cpptools
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension ms-vscode.cpptools-themes
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension twxs.cmake
          ./hardwario-code/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --install-extension hardwario-tower.vsix

      - name: Prepare macOS Installer
        run: | 
          git clone https://github.com/SmejkalJakub/hardwario-macos-installer.git
          mv hardwario-code/Visual\ Studio\ Code.app hardwario-macos-installer/macOS-x64/application/Visual\ Studio\ Code.app
          mv hardwario-code/code-portable-data hardwario-macos-installer/macOS-x64/application/code-portable-data
          ls hardwario-macos-installer/macOS-x64/application/

      - name: Setup env
        run: echo "TAG=${{env.VERSION}}" >> "$GITHUB_ENV"

      #- name: Install the Apple certificate and provisioning profile
      #  run: |
      #    # create variables
      #    CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #    PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #    KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
      #    echo "KEYCHAIN_PATH_GLOBAL=$KEYCHAIN_PATH" >> "$GITHUB_ENV"
#
      #    # import certificate and provisioning profile from secrets
      #    echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
      #    echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#
      #    # create temporary keychain
      #    security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #    security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
      #    # import certificate to keychain
      #    security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -T /usr/bin/codesign -k $KEYCHAIN_PATH
      #    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #    security list-keychain -d user -s $KEYCHAIN_PATH
#
      #    # apply provisioning profile
      #    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #    cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
      #    security find-identity -v
      #    security find-identity -p codesigning
#
#
      #- run: security find-identity -v

      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Codesign executable
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo $APPLICATION_CERTIFICATE_BASE64 | base64 --decode > application.p12
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import application.p12 -k $KEYCHAIN_PATH -P $P12_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security find-identity -v
          security find-identity -p codesigning

      - name: Run macOS Installer
        run: | 
          echo ${{env.KEYCHAIN_PATH_GLOBAL}}
          find . -perm +111 -type f -or -type l -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;
          find . -name "arm-*" -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;
          find . -name "*.so" -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;
          find . -name "*.dylib" -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;
          find . -name "*.node" -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;
          find . -name "*.o" -execdir sudo codesign --force --verify --timestamp --verbose --sign C32QFQ68V9 --options runtime {} \;


          echo "jsem tu"
          bash hardwario-macos-installer/macOS-x64/build-macos-x64.sh hardwario-code ${{env.TAG}}
          echo "vyrobeno"
          ls hardwario-macos-installer/macOS-x64/target/pkg-signed/
          echo "ls"
          mv hardwario-macos-installer/macOS-x64/target/pkg-signed/hardwario-code-macos-${{env.TAG}}.pkg "${{ github.workspace }}/hio-code-${{env.TAG}}-macos.pkg"
          echo "moved"
          echo "signed"
          echo "notarizing"
          xcrun altool --notarize-app --primary-bundle-id "com.hardwario.code" --username "$APP_EMAIL" --password "$APP_SPECIFIC_PASSWORD" --file "${{ github.workspace }}/hio-code-${{env.TAG}}-macos.pkg"

      - name: Publish the extension
        uses: softprops/action-gh-release@v0.1.5
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          files: hio-code-${{env.TAG}}-macos.pkg

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: hardwario-code-macos
          path: hio-code-${{env.TAG}}-macos.pkg